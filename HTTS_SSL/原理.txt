Client-------请求---------->Server


Client<-------电子证书（包含公钥）------------Server(秘钥+秘钥)


Client----生成随机数---生成对称加密秘钥abc---公钥加密---发送给---->Server---->使用秘钥解密----->得到对称加密秘钥abc	// 非对称加密


Client(对称加密秘钥abc+算法)<-------------->Server(对称加密秘钥abc+算法)	// 对称加密


对称加密：加密和加密秘钥相同

非对称加密：加密和解密的秘钥不相同

私钥加密后的密文，只要是公钥，都可以解密，但是公钥加密后的密文，只有私钥可以解密


SSL解决方案: 使用非对称加密算法进行对称加密算法协商过程

要达到Web服务器针对每个客户端使用不同的对称加密算法，同时，我们也不能让第三者知道这个对称加密算法是什么，怎么办
使用随机数，就是使用随机数来生成对称加密算法
这样就可以做到服务器和客户端每次交互都是新的加密算法、只有在交互的那一刻才确定加密算法


---------------------------
因为Server端，公钥可能伪造，使用需要第三方机构（因为要去浏览器保持所有网站的公钥不现实）

-----------------------------
我们不能直接将服务器的公钥传递给客户端，而是第三方机构使用它的私钥对我们的公钥进行加密后，再传给客户端。客户端再使用第三方机构的公钥进行解密

1.第三方机构使用【它的私钥对我们的公钥】进行加密后，再传给客户端
2.客户端再使用第三方机构的公钥进行解密


-->【第三方机构使用它的私钥对我们的公钥】  ==  数字证书，是第三方机构颁发的一个文件，放在Server
-----------------------------

新的场景：第三方机构，可能也会给【伪装者】颁发证书

这样Client的第三方机构公钥都能对【真实证书】和【伪装证书】解密成功

要解决这个问题，我们首先要想清楚一个问题，辨别同一机构下不同证书的这个职责，我们应该放在哪？
只能放到客户端了。意思是，客户端在拿到证书后，自己就有能力分辨证书是否被篡改了。如何才能有这个能力呢？

很简单：第三方机构颁发证书带编号，浏览器接受到这个证书的时候，拿编码，去第三方机构查询即可

可是，这个“第三方机构”到底是在哪呢？是一个远端服务？不可能吧？如果是个远端服务，整个交互都会慢了。所以，这个第三方机构的验证功能只能放在客户端的本地了

客户端本地怎么验证证书呢？答案是证书本身就已经告诉客户端怎么验证证书的真伪

也就是证书上写着如何根据证书的内容生成证书编号。客户端拿到证书后根据证书上的方法自己生成一个证书编号，如果生成的证书编号与证书上的证书编号相同，那么说明这个证书是真实的
为避免证书编号本身又被调包，所以使用第三方的私钥进行加密

但是第三方机构的公钥怎么跑到了客户端的机器中呢？世界上这么多机器现实中，浏览器和操作系统都会维护一个权威的第三方机构列表（包括它们的公钥）

因为客户端接收到的证书中会写有颁发机构，客户端就根据这个颁发机构的值在本地找相应的公钥


【证书就是HTTPS中数字证书，证书编号就是数字签名，而第三方机构就是指数字证书签发机构（CA）】


数字证书 == jks文件 ??


-----------------------------------

HTTPS要使客户端与服务器端的通信过程得到安全保证，必须使用的对称加密算法，但是协商对称加密算法的过程，需要使用非对称加密算法来保证安全，然而直接使用非对称加密的过程本身也不安全，会有中间人篡改公钥的可能性，所以客户端与服务器不直接使用公钥，而是使用数字证书签发机构颁发的证书来保证非对称加密过程本身的安全。这样通过这些机制协商出一个对称加密算法，就此双方使用该算法进行加密解密。从而解决了客户端与服务器端之间的通信安全问题。












