filter是一个可以复用的代码片段，可以用来转换HTTP请求、响应和头信息

它只是修改对某一资源的请求，或者修改从某一的响应


Servlet中的过滤器Filter是实现了javax.servlet.Filter接口的服务器端程序，主要的用途是过滤字符编码、做一些业务逻辑判断等

Filter有如下几个用处。

在HttpServletRequest到达Servlet之前，拦截客户的HttpServletRequest。
根据需要检查HttpServletRequest，也可以修改HttpServletRequest头和数据。
在HttpServletResponse到达客户端之前，拦截HttpServletResponse。
根据需要检查HttpServletResponse，也可以修改HttpServletResponse头和数据。

Filter有如下几个种类。

用户授权的Filter：Filter负责检查用户请求，根据请求过滤用户非法请求。
日志Filter：详细记录某些特殊的用户请求。
负责解码的Filter：包括对非标准编码的请求解码。
能改变XML内容的XSLT Filter等。
Filter可负责拦截多个请求或响应；一个请求或响应也可被多个请求拦截。


在上面的请求Filter中，仅在日志中记录请求的URL，对所有的请求都执行chain.doFilter (request,reponse)方法，当Filter对请求过滤后，依然将请求发送到目的地址。如果需要检查权限，可以在Filter中根据用户请求的HttpSession，判断用户权限是否足够。如果权限不够，直接调用重定向即可，无须调用chain.doFilter(request,reponse)方法。



<filter>
        <filter-name>logfilter</filter-name>
        <filter-class>com.mine.test.LogFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>logfilter</filter-name>
        <url-pattern>/*</url-pattern> <!--配置过滤的范围   后缀符合即过滤  此处为全部过滤-->
    </filter-mapping>




----------------------------

interceptor：是在面向切面编程的，就是在你的service或者一个方法，前调用一个方法，或者在方法后调用一个方法，是基于JAVA的反射机制。比如动态代理就是拦截器的简单实现，在你调用方法前打印出字符串（或者做其它业务逻辑的操作），也可以在你调用方法后打印出字符串，甚至在你抛出异常的时候做业务逻辑的操作。


----------------------------

servlet、filter、listener是配置到web.xml中（web.xml 的加载顺序是：context-param -> listener -> filter -> servlet ），interceptor不配置到web.xml中，struts的拦截器配置到struts.xml中。spring的拦截器配置到spring.xml中


配置servlet时如果加上load-on-start（在servlet的配置当中，<load-onstartup>1</load-on-startup>的含义是：标记容器是否在启动的时候就加载这个servlet。当值为0或者大于0时，表示容器在应用启动时就加载这个servlet；当是一个负数时或者没有指定时，则指示容器在该servlet被选择时才加载。正数的值越小，启动该servlet的优先级越高。）为1时候，Web应用启动时候加载Servlet


filter：（必须实现javax.Servlet.Filter接口，并且必须定义以下三个方法:init(),destory(),doFilter()，空实现也行） 
         (1)、启动服务器时加载过滤器的实例，并调用init()方法来初始化实例； 
         (2)、每一次请求时都只调用方法doFilter()进行处理； 
         (3)、停止服务器时调用destroy()方法，销毁实例。



Servlet的监听器Listener，它是实现了javax.servlet.ServletContextListener 接口的服务器端程序，它也是随web应用的启动而启动，只初始化一次，随web应用的停止而销毁。
           web.xml 的加载顺序是：context- param -> listener -> filter -> servlet 


interceptor：以struts的拦截器为例，加载了struts.xml以后，初始化相应拦截器。当action请求来时调用intercept方法，服务器停止销毁interceptor


interceptor 拦截器，类似于filter,不过在struts.xml中配置，不是在web.xml,并且不是针对URL的，而是针对action,当页面提交action时，进行过滤操作，相当于struts1.x提供的plug-in机制，可以看作，前者是struts1.x自带的filter,而interceptor 是struts2 提供的filter.
    与filter不同点：（１）不在web.xml中配置，而是在struts.xml中完成配置，与action在一起
                            ( 2  ) 可由action自己指定用哪个interceptor 来在接收之前做事  


struts2中的过滤器和拦截器的区别与联系：
      （1）、拦截器是基于java反射机制的，而过滤器是基于函数回调的。
      （2）、过滤器依赖与servlet容器，而拦截器不依赖与servlet容器。
      （3）、拦截器只能对Action请求起作用，而过滤器则可以对几乎所有请求起作用。
      （4）、拦截器可以访问Action上下文、值栈里的对象，而过滤器不能。
      （5）、在Action的生命周期中，拦截器可以多次调用，而过滤器只能在容器初始化时被调用一次。


之前在web.xml文件中配置的方式还是可以的，同时我们还可以使用注解进行配置。对于使用注解的监听器就是在监听器类上使用@WebListener进行标注，这样Web容器就会把它当做一个监听器进行注册和使用了  



正的加载顺序为：context-param -> listener -> filter -> servlet


启动一个WEB项目的时候,容器(如:Tomcat)会去读它的配置文件web.xml.读两个节点: <listener></listener> 和 <context-param></context-param> 

2.紧接着,容器创建一个ServletContext(上下文),这个WEB项目所有部分都将共享这个上下文. 

3.容器将<context-param></context-param>转化为键值对,并交给ServletContext. 

4.容器创建<listener></listener>中的类实例,即创建监听(通过contextInitialized(ServletContextEvent args)这个方法). listener的类实例需要实现 javax.servlet.ServletContextListener接口。

5.容器初始化<filter></filter>。filter的类实例需要实现 javax.servlet.Filter接口

6.容器加载<load-on-startup>的<serlvet/>。 servlet实现javax.servlet.Servlet接口

7.容器销毁时，按照servlet-->filter-->listener的顺序销毁servlet、filter和listener
。最终得出的结论是：listener -> filter -> servlet


=====================================================

分别介绍：

　　一、 ServletContext相关监听接口

　　补充知识：

　　通过ServletContext 的实例可以存取应用程序的全局对象以及初始化阶段的变量。

　　在JSP文件中，application 是 ServletContext 的实例，由JSP容器默认创建。Servlet 中调用 getServletContext()方法得到 ServletContext 的实例。

　　注意：

　　全局对象即Application范围对象，初始化阶段的变量指在web.xml中，经由<context-param>元素所设定的变量，它的范围也是Application范围，例如：

　　<context-param>

　　<param-name>Name</param-name>

　　<param-value>browser</param-value>

　　</context-param>

　　当容器启动时，会建立一个Application范围的对象，若要在JSP网页中取得此变量时：

　　String name = (String)application.getInitParameter("Name");
　　或者使用EL时：
　　${initPara.name}
　　若是在Servlet中，取得Name的值方法：
　　String name = (String)ServletContext.getInitParameter("Name");
　　1.ServletContextListener：
　　用于监听WEB 应用启动和销毁的事件，监听器类需要实现javax.servlet.ServletContextListener 接口。
　　ServletContextListener 是 ServletContext 的监听者，如果 ServletContext 发生变化，如服务器启动时 ServletContext 被创建，服务器关闭时 ServletContext 将要被销毁。
　　ServletContextListener接口的方法：
　　void contextInitialized(ServletContextEvent sce)
　　通知正在接受的对象，应用程序已经被加载及初始化。
　　void contextDestroyed(ServletContextEvent sce)
　　通知正在接受的对象，应用程序已经被载出。
　　ServletContextEvent中的方法：
　　ServletContext getServletContext()　　
　　取得ServletContext对象
　　2.ServletContextAttributeListener：用于监听WEB应用属性改变的事件，包括：增加属性、删除属性、修改属性，监听器类需要实现javax.servlet.ServletContextAttributeListener接口。
　　ServletContextAttributeListener接口方法：
　　void attributeAdded(ServletContextAttributeEvent scab)
　　若有对象加入Application的范围，通知正在收听的对象
　　void attributeRemoved(ServletContextAttributeEvent scab)
　　若有对象从Application的范围移除，通知正在收听的对象
　　void attributeReplaced(ServletContextAttributeEvent scab)
　　若在Application的范围中，有对象取代另一个对象时，通知正在收听的对象
　　ServletContextAttributeEvent中的方法：
　　java.lang.String getName()
　　回传属性的名称
　　java.lang.Object getValue()
　　回传属性的值
